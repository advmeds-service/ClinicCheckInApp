plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "kotlinx-serialization"
    id "kotlin-android-extensions"
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.advmeds.cliniccheckinapp"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"

        flavorDimensions "mode"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file((project.rootDir.toString() + '\\key\\release'))
            storePassword '123456'
            keyPassword '123456'
            keyAlias = 'KeyAlias'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            debuggable = true

            buildConfigField "String", "MS_DOMAIN", "\"https://test.mscheduler.com/\""
            // depend on previous buildConfigField "MS_DOMAIN" is it www so it 0 if it test it 1
            buildConfigField "String", "MS_DOMAIN_SETTINGS_RADIO", "\"1\""
            buildConfigField "String", "ORG_ID", "\"1\""
            buildConfigField "String", "DEFAULT_LANGUAGE", "\"en\""
            buildConfigField "String", "DEFAULT_PASSWORD", "\"qwerty\""
            buildConfigField "String", "UPDATE_NAME", "\"CheckInApp\""
        }

        // 門診取號機
        release {
            minifyEnabled false
            debuggable = false

            signingConfig signingConfigs.release

            buildConfigField "String", "MS_DOMAIN", "\"https://www.mscheduler.com/\""
            // depend on previous buildConfigField "MS_DOMAIN" is it www so it 0 if it test it 1
            buildConfigField "String", "MS_DOMAIN_SETTINGS_RADIO", "\"0\""
            buildConfigField "String", "ORG_ID", "\"1\""
            buildConfigField "String", "DEFAULT_LANGUAGE", "\"en\""
            buildConfigField "String", "DEFAULT_PASSWORD", "\"qwerty\""

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // 屏基
        // 落地雲
        // 將門診相關文字顯示改成檢查室
        // 並且醫師與科別顛倒
        ptch {
            initWith release

            buildConfigField "String", "MS_DOMAIN", "\"http://129.34.70.92:3000\""
        }

        // 仁德衛生所
        // 介面有調整
        // 而且門診取號為固定的
        rende {
            initWith release

            buildConfigField "String", "ORG_ID", "\"103\""
        }
    }

    productFlavors {
        create("checkIn") {
            dimension = "mode"
        }

        create("checkInWithPanel") {
            dimension = "mode"
        }
    }

    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        def ignorePanel = names.contains("checkInWithPanel") && variant.buildType.name == "ptch"
        if (ignorePanel) {
            setIgnore(true)
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName = "mSchedulerCheckIn_${defaultConfig.versionName}.apk"
            outputFileName = fileName
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    def retrofit2_version = "2.8.1"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0"

    def lifecycle_version = "2.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version" // ViewModel
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version" // LiveData
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version" // alternatively - Lifecycles only (no ViewModel or LiveData).
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version" // alternately - if using Java8, use the following instead of compiler

    // Coroutines
    def kotlin_coroutines_version = "1.4.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    // kotlinx.serialization
    def serialization_version = "1.3.2"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

    // lottie
    def lottie_version = "5.0.1"
    implementation "com.airbnb.android:lottie:$lottie_version"

    // lottie
    def coil_version = "1.4.0"
    implementation "io.coil-kt:coil:$coil_version"

    implementation "com.jakewharton.timber:timber:4.7.1"

    implementation files("libs/acsbt-1.0.1.aar")
    implementation 'com.github.advmeds-service:CardReaderModule_Android:1.2.6'

    implementation 'com.github.advmeds-service:PrinterLib:1.0.4'

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    checkInWithPanelImplementation("org.mozilla.geckoview:geckoview:71.0.20200108003105")
}